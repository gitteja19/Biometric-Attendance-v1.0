#include <SD.h>
#include <Adafruit_MCP23X17.h>
#include <EEPROM.h>
#include <Adafruit_Fingerprint.h>
#include <SoftwareSerial.h>
#include <ESP8266WiFi.h>
#include "wpa2_enterprise.h"
#include "TRIGGER_WIFI.h"               
#include "TRIGGER_GOOGLESHEETS.h"
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
SoftwareSerial fingerPrint(0, 2);
File myFile;
//   Replace with your SSID and Password
const char* ssid = "eduroam";
const char* username = "200020016";
const char* password = "C_RErqhd65";
char column_name_in_sheets[ ][6] = {"v1"};                      
String Sheets_GAS_ID = "AKfycbzelzsM9Hx3XTwAYhfs1O4bAhfl1gbCaHBEnPdMmrn7_sW3rdPfQftSyBhQ64M3X1aY";
uint8_t id=1;
unsigned long int rollNumber[1000];
int attend[1000] = {0};
Adafruit_MCP23X17 mcp;
Adafruit_Fingerprint finger = Adafruit_Fingerprint(&fingerPrint);
//////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////        Defining
#define r1 7
#define r2 6
#define r3 5
#define r4 4
#define c1 3
#define c2 2
#define c3 1
#define c4 0
#define buzzer 15
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define FinPr_scan_width 64
#define FinPr_scan_height 64
#define OLED_RESET   -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
#define Wifi_start_width 54
#define Wifi_start_height 49
#define FinPr_start_width 64
#define FinPr_start_height 64
#define Wifi_connected_width 63
#define Wifi_connected_height 49
#define FinPr_invalid_width 64
#define FinPr_invalid_height 64
#define FinPr_failed_width 64
#define FinPr_failed_height 64
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

int r[] = {128,64,32,16};
const char hexaKeys[4][4] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const uint8_t PROGMEM Wifi_start_bits[] = {
  0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x1f,0xf0,0x00,0x00,0x00
,0x00,0x03,0xff,0xff,0x80,0x00,0x00
,0x00,0x1f,0xf0,0x1f,0xf0,0x00,0x00
,0x00,0x7e,0x00,0x00,0xfc,0x00,0x00
,0x01,0xf0,0x00,0x00,0x1f,0x00,0x00
,0x03,0xc0,0x00,0x00,0x07,0xc0,0x00
,0x0f,0x00,0x00,0x00,0x01,0xe0,0x00
,0x1c,0x00,0x00,0x00,0x00,0x70,0x00
,0x38,0x00,0x07,0xc0,0x00,0x38,0x00
,0x70,0x00,0xff,0xfe,0x00,0x1e,0x00
,0xe0,0x03,0xfc,0x7f,0xc0,0x0e,0x00
,0x00,0x1f,0x80,0x03,0xf0,0x00,0x00
,0x00,0x3c,0x00,0x00,0x78,0x00,0x00
,0x00,0xf0,0x00,0x00,0x1c,0x00,0x00
,0x01,0xe0,0x00,0x00,0x0c,0x00,0x00
,0x03,0x80,0x00,0x00,0x00,0x00,0x00
,0x03,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x3f,0xf8,0x07,0x1e,0x00
,0x00,0x00,0xff,0xfe,0x1f,0xbf,0x80
,0x00,0x03,0xe0,0x04,0x7f,0xff,0xc0
,0x00,0x07,0x80,0x00,0xff,0xff,0xe0
,0x00,0x0e,0x00,0x00,0xff,0xff,0xe0
,0x00,0x0c,0x00,0x00,0x7f,0xff,0xc0
,0x00,0x00,0x00,0x00,0xfe,0x07,0xe0
,0x00,0x00,0x00,0x03,0xf8,0x03,0xf8
,0x00,0x00,0x07,0xe7,0xf9,0xf1,0xfc
,0x00,0x00,0x1f,0xe7,0xf1,0xf9,0xfc
,0x00,0x00,0x1f,0xe7,0xf3,0xf9,0xfc
,0x00,0x00,0x3f,0xe7,0xf3,0xf9,0xfc
,0x00,0x00,0x3f,0xe7,0xf1,0xf1,0xfc
,0x00,0x00,0x3f,0xe3,0xf8,0xe3,0xfc
,0x00,0x00,0x3f,0xf3,0xfc,0x07,0xf8
,0x00,0x00,0x1f,0xf0,0x7f,0x0f,0xc0
,0x00,0x00,0x0f,0xe0,0x7f,0xff,0xe0
,0x00,0x00,0x07,0xc0,0xff,0xff,0xe0
,0x00,0x00,0x00,0x00,0x7f,0xff,0xe0
,0x00,0x00,0x00,0x00,0x3f,0xff,0x80
,0x00,0x00,0x00,0x00,0x1f,0xbf,0x00
,0x00,0x00,0x00,0x00,0x03,0x18,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
const uint8_t PROGMEM Wifi_connected_bits[] = {
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x03,0xff,0xff,0x80,0x00,0x00
,0x00,0x00,0x3f,0xff,0xff,0xf8,0x00,0x00
,0x00,0x01,0xff,0xff,0xff,0xff,0x00,0x00
,0x00,0x0f,0xff,0xff,0xff,0xff,0xe0,0x00
,0x00,0x3f,0xff,0xc0,0x07,0xff,0xf8,0x00
,0x00,0xff,0xf8,0x00,0x00,0x3f,0xfe,0x00
,0x03,0xff,0x80,0x00,0x00,0x03,0xff,0x80
,0x07,0xfe,0x00,0x00,0x00,0x00,0xff,0xc0
,0x1f,0xf8,0x00,0x00,0x00,0x00,0x3f,0xf0
,0x3f,0xe0,0x01,0xff,0xff,0x00,0x0f,0xf8
,0x7f,0x80,0x0f,0xff,0xff,0xe0,0x03,0xfc
,0xff,0x00,0x7f,0xff,0xff,0xfc,0x01,0xfe
,0xfc,0x01,0xff,0xff,0xff,0xff,0x00,0x7e
,0x78,0x07,0xff,0xc0,0x07,0xff,0xc0,0x3c
,0x00,0x0f,0xfc,0x00,0x00,0x7f,0xe0,0x00
,0x00,0x1f,0xf0,0x00,0x00,0x1f,0xf0,0x00
,0x00,0x3f,0xc0,0x00,0x00,0x07,0xf8,0x00
,0x00,0x7f,0x00,0x01,0x00,0x01,0xfc,0x00
,0x00,0x7e,0x00,0x7f,0xfc,0x00,0xfc,0x00
,0x00,0x3c,0x03,0xff,0xff,0x80,0x78,0x00
,0x00,0x00,0x07,0xff,0xff,0xc0,0x00,0x00
,0x00,0x00,0x1f,0xff,0xff,0xf0,0x00,0x00
,0x00,0x00,0x3f,0xf0,0x1f,0xf8,0x00,0x00
,0x00,0x00,0x3f,0x80,0x03,0xf8,0x00,0x00
,0x00,0x00,0x3f,0x00,0x01,0xf8,0x00,0x00
,0x00,0x00,0x1c,0x00,0x00,0x70,0x00,0x00
,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x0f,0xe0,0x00,0x00,0x00
,0x00,0x00,0x00,0x1f,0xf0,0x00,0x00,0x00
,0x00,0x00,0x00,0x3f,0xf8,0x00,0x00,0x00
,0x00,0x00,0x00,0x3f,0xf8,0x00,0x00,0x00
,0x00,0x00,0x00,0x3f,0xf8,0x00,0x00,0x00
,0x00,0x00,0x00,0x3f,0xf8,0x00,0x00,0x00
,0x00,0x00,0x00,0x1f,0xf0,0x00,0x00,0x00
,0x00,0x00,0x00,0x0f,0xe0,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
const uint8_t PROGMEM FinPr_start_bits[] = {
  0x00,0x00,0x00,0x1f,0xe0,0x00,0x00,0x00
,0x00,0x00,0x01,0xff,0xfe,0x00,0x00,0x00
,0x00,0x00,0x03,0xff,0xff,0x80,0x00,0x00
,0x00,0x00,0x0f,0xc0,0x0f,0xe0,0x00,0x00
,0x00,0x00,0x1f,0x00,0x01,0xf8,0x00,0x00
,0x00,0x00,0x3c,0x00,0x00,0x7c,0x00,0x00
,0x00,0x00,0x78,0x00,0x00,0x3e,0x00,0x00
,0x00,0x00,0xf0,0x3f,0xf8,0x0f,0x00,0x00
,0x00,0x01,0xe0,0xff,0xfe,0x07,0x80,0x00
,0x00,0x03,0xc3,0xff,0xff,0x03,0x80,0x00
,0x00,0x03,0x87,0xc0,0x07,0xc3,0xc0,0x00
,0x00,0x07,0x0f,0x00,0x03,0xe1,0xc0,0x00
,0x00,0x0f,0x0e,0x00,0x00,0xe0,0xe0,0x00
,0x00,0x0e,0x1c,0x00,0x00,0xf0,0xe0,0x00
,0x00,0x0c,0x3c,0x1f,0xe0,0x70,0xe0,0x00
,0x00,0x00,0x38,0x3f,0xf0,0x38,0x70,0x00
,0x00,0x00,0x78,0x78,0xf8,0x38,0x70,0x00
,0x00,0x00,0x70,0x70,0x3c,0x18,0x70,0x00
,0x00,0x00,0xe0,0xe0,0x1e,0x1c,0x70,0x00
,0x00,0x03,0xe1,0xe0,0x0e,0x1c,0x70,0x00
,0x00,0x0f,0xc1,0xc3,0x0e,0x1c,0x70,0x00
,0x00,0x3f,0x03,0xc3,0x8e,0x1c,0x70,0x00
,0x00,0x3e,0x03,0x87,0x0e,0x1c,0x70,0x00
,0x00,0x30,0x07,0x07,0x0e,0x18,0xe0,0x00
,0x00,0x00,0x0e,0x0e,0x0e,0x38,0xe0,0x00
,0x00,0x00,0x3e,0x1e,0x1e,0x38,0xe0,0x00
,0x00,0x00,0xf8,0x1c,0x1c,0x38,0xe0,0x00
,0x00,0x03,0xf0,0x38,0x3c,0x38,0xe0,0x00
,0x00,0x3f,0xc0,0xf8,0x78,0x38,0xe0,0x00
,0x00,0x7f,0x01,0xf0,0x70,0x38,0xf0,0x00
,0x00,0x78,0x03,0xe0,0xe0,0x38,0x70,0x00
,0x00,0x00,0x0f,0x81,0xe0,0x38,0x7c,0x00
,0x00,0x00,0x3f,0x03,0xc0,0x38,0x3e,0x00
,0x00,0x00,0xfc,0x0f,0x80,0x38,0x1e,0x00
,0x00,0x07,0xf0,0x1f,0x1c,0x1c,0x04,0x00
,0x00,0x3f,0xc0,0x3e,0x3f,0x1e,0x00,0x00
,0x00,0x7f,0x00,0xf8,0x7f,0x0f,0x00,0x00
,0x00,0x38,0x01,0xf0,0xf7,0x07,0xc0,0x00
,0x00,0x00,0x07,0xe1,0xe3,0x83,0xf8,0x00
,0x00,0x00,0x3f,0x87,0xc3,0xc0,0xfc,0x00
,0x00,0x01,0xfe,0x0f,0x81,0xe0,0x3c,0x00
,0x00,0x0f,0xf8,0x1f,0x00,0xf0,0x00,0x00
,0x00,0x1f,0xc0,0x7c,0x00,0x7c,0x00,0x00
,0x00,0x1e,0x01,0xf8,0x00,0x3f,0x00,0x00
,0x00,0x00,0x07,0xe0,0x78,0x0f,0xc0,0x00
,0x00,0x00,0x3f,0x81,0xfe,0x07,0xf0,0x00
,0x00,0x01,0xfe,0x07,0xff,0x01,0xf0,0x00
,0x00,0x07,0xf8,0x0f,0x87,0x80,0x30,0x00
,0x00,0x07,0xc0,0x3f,0x03,0xe0,0x00,0x00
,0x00,0x06,0x00,0xfc,0x01,0xf8,0x00,0x00
,0x00,0x00,0x03,0xf0,0x00,0x7e,0x00,0x00
,0x00,0x00,0x0f,0xc0,0x00,0x3f,0x80,0x00
,0x00,0x00,0x7f,0x00,0xf8,0x0f,0x80,0x00
,0x00,0x00,0xfc,0x03,0xfe,0x01,0x80,0x00
,0x00,0x00,0xf0,0x1f,0xff,0x80,0x00,0x00
,0x00,0x00,0x00,0x7f,0x07,0xe0,0x00,0x00
,0x00,0x00,0x00,0xfc,0x03,0xf8,0x00,0x00
,0x00,0x00,0x03,0xf0,0x00,0x78,0x00,0x00
,0x00,0x00,0x0f,0xc0,0x00,0x18,0x00,0x00
,0x00,0x00,0x0f,0x01,0xf8,0x00,0x00,0x00
,0x00,0x00,0x00,0x07,0xfe,0x00,0x00,0x00
,0x00,0x00,0x00,0x1f,0xfe,0x00,0x00,0x00
,0x00,0x00,0x00,0x1e,0x0e,0x00,0x00,0x00
,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00
};
const unsigned char FinPr_valid_bits [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xf8, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0x7f, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0x0f, 0x0f, 0xff, 0xff, 
	0xff, 0xff, 0xf1, 0xc0, 0x03, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xe3, 0x87, 0xe1, 0xc7, 0xff, 0xff, 
	0xff, 0xff, 0xc7, 0x1f, 0xf8, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xc6, 0x38, 0x1c, 0x63, 0xff, 0xff, 
	0xff, 0xff, 0x8c, 0x70, 0x0e, 0x31, 0xff, 0xff, 0xff, 0xff, 0x8c, 0xe1, 0x87, 0x31, 0xff, 0xff, 
	0xff, 0xff, 0x98, 0xc7, 0xe3, 0x19, 0xff, 0xff, 0xff, 0xff, 0x98, 0xcf, 0xf3, 0x19, 0xff, 0xff, 
	0xff, 0xff, 0x99, 0xdd, 0xf1, 0x19, 0xff, 0xff, 0xff, 0xff, 0x99, 0xf0, 0x71, 0x99, 0xff, 0xff, 
	0xff, 0xff, 0x99, 0xf0, 0x31, 0x99, 0xff, 0xff, 0xff, 0xff, 0x99, 0xe3, 0x31, 0x99, 0xff, 0xff, 
	0xff, 0xff, 0x99, 0xe3, 0x31, 0x99, 0xff, 0xff, 0xff, 0xff, 0x99, 0xe3, 0x33, 0x99, 0xff, 0xff, 
	0xff, 0xff, 0x99, 0xe3, 0x3f, 0x99, 0xff, 0xff, 0xff, 0xff, 0x99, 0xe3, 0x1f, 0x99, 0xff, 0xff, 
	0xff, 0xff, 0x99, 0xe3, 0x03, 0x99, 0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0x80, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x03, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xfc, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xfe, 0x3f, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xfc, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x0f, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xfc, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xe3, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xfc, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf3, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf8, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
const uint8_t PROGMEM FinPr_invalid_bits[] = {
  0x00,0x00,0x03,0xfe,0x00,0x00,0x00,0x00
,0x00,0x00,0x1f,0xff,0xe0,0x00,0x00,0x00
,0x00,0x00,0x7f,0xff,0xf8,0x00,0x00,0x00
,0x00,0x00,0xfc,0x00,0xfe,0x00,0x00,0x00
,0x00,0x03,0xe0,0x00,0x1f,0x00,0x00,0x00
,0x00,0x07,0xc0,0x00,0x07,0x80,0x00,0x00
,0x00,0x0f,0x80,0x00,0x03,0xe0,0x00,0x00
,0x00,0x0e,0x03,0xff,0x01,0xe0,0x00,0x00
,0x00,0x1c,0x1f,0xff,0xe0,0xf0,0x00,0x00
,0x00,0x3c,0x3f,0xff,0xf0,0x78,0x00,0x00
,0x00,0x78,0x7c,0x00,0xf8,0x3c,0x00,0x00
,0x00,0x70,0xf0,0x00,0x3c,0x1c,0x00,0x00
,0x00,0xe1,0xe0,0x00,0x1e,0x1c,0x00,0x00
,0x00,0xe1,0xc0,0x00,0x0f,0x0e,0x00,0x00
,0x00,0xc3,0x81,0xfc,0x07,0x0e,0x00,0x00
,0x00,0x03,0x83,0xff,0x07,0x8e,0x00,0x00
,0x00,0x07,0x07,0x8f,0x83,0x87,0x00,0x00
,0x00,0x0f,0x0f,0x03,0xc3,0x87,0x00,0x00
,0x00,0x1e,0x0e,0x01,0xc3,0x87,0x00,0x00
,0x00,0x3c,0x1c,0x00,0xe1,0x87,0x00,0x00
,0x00,0xf8,0x1c,0x30,0xe1,0x87,0x00,0x00
,0x07,0xf0,0x38,0x70,0xe1,0x86,0x00,0x00
,0x07,0xc0,0x78,0x70,0xe3,0x8e,0x00,0x00
,0x02,0x00,0xf0,0xf0,0xe3,0x8e,0x00,0x00
,0x00,0x01,0xe0,0xe0,0xe3,0x8e,0x00,0x00
,0x00,0x03,0xc1,0xe1,0xc3,0x8e,0x00,0x00
,0x00,0x0f,0x83,0xc3,0xc3,0x8e,0x00,0x00
,0x00,0x7f,0x07,0x83,0x83,0x0e,0x00,0x00
,0x07,0xfc,0x0f,0x07,0x83,0x0e,0x00,0x00
,0x07,0xf0,0x1e,0x0f,0x03,0x0e,0x00,0x00
,0x07,0x80,0x7c,0x1e,0x03,0x07,0x00,0x00
,0x00,0x00,0xf8,0x3c,0x03,0x87,0x80,0x00
,0x00,0x03,0xf0,0x78,0x03,0x83,0xc0,0x00
,0x00,0x1f,0xc0,0xf0,0x02,0x00,0x00,0x00
,0x00,0xff,0x01,0xe1,0xc0,0x00,0x00,0x00
,0x07,0xfc,0x03,0xc3,0xe1,0xff,0xc0,0x00
,0x07,0xe0,0x0f,0x87,0xc7,0xff,0xf0,0x00
,0x07,0x00,0x3f,0x0f,0x0f,0xff,0xf8,0x00
,0x00,0x00,0x7c,0x3e,0x1f,0xff,0xfe,0x00
,0x00,0x03,0xf8,0x7c,0x3f,0xff,0xff,0x00
,0x00,0x1f,0xe0,0xf0,0x7f,0xff,0xff,0x00
,0x00,0xff,0x83,0xe0,0xfe,0xff,0xbf,0x80
,0x01,0xfc,0x07,0xc0,0xfc,0x7f,0x1f,0xc0
,0x01,0xe0,0x1f,0x01,0xf8,0x3e,0x0f,0xc0
,0x00,0x00,0xfe,0x01,0xf8,0x1c,0x07,0xe0
,0x00,0x03,0xf8,0x13,0xf8,0x00,0x0f,0xe0
,0x00,0x1f,0xe0,0x73,0xfc,0x00,0x1f,0xe0
,0x00,0x7f,0x81,0xf3,0xfe,0x00,0x3f,0xe0
,0x00,0xfc,0x03,0xe3,0xff,0x00,0x7f,0xe0
,0x00,0x60,0x0f,0xc3,0xff,0x80,0xff,0xe0
,0x00,0x00,0x3f,0x03,0xff,0x00,0x7f,0xe0
,0x00,0x00,0xfc,0x03,0xfe,0x00,0x3f,0xe0
,0x00,0x07,0xf0,0x13,0xfc,0x00,0x1f,0xe0
,0x00,0x0f,0xc0,0x79,0xf8,0x08,0x0f,0xe0
,0x00,0x0f,0x01,0xf9,0xf8,0x1c,0x0f,0xc0
,0x00,0x00,0x07,0xf1,0xfc,0x3e,0x1f,0xc0
,0x00,0x00,0x1f,0xc0,0xfe,0x7f,0x3f,0x80
,0x00,0x00,0x7e,0x00,0xff,0xff,0xff,0x80
,0x00,0x00,0xfc,0x00,0x7f,0xff,0xff,0x00
,0x00,0x00,0xf0,0x1f,0x3f,0xff,0xfe,0x00
,0x00,0x00,0x00,0x7f,0x1f,0xff,0xfc,0x00
,0x00,0x00,0x01,0xff,0x8f,0xff,0xf8,0x00
,0x00,0x00,0x03,0xe0,0xe3,0xff,0xe0,0x00
,0x00,0x00,0x01,0x80,0x00,0x7f,0x00,0x00
};
const uint8_t PROGMEM FinPr_failed_bits[] = {
0x00,0x00,0x3f,0xe0,0x00,0x00,0x00,0x00
,0x00,0x01,0xff,0xfe,0x00,0x00,0x00,0x00
,0x00,0x0f,0xc0,0x1f,0x80,0x00,0x00,0x00
,0x00,0x1e,0x00,0x03,0xc0,0x00,0x00,0x00
,0x00,0x78,0x00,0x00,0xf0,0x00,0x00,0x00
,0x00,0xe0,0x00,0x00,0x38,0x00,0x00,0x00
,0x01,0xc0,0x00,0x00,0x1c,0x00,0x00,0x00
,0x03,0x80,0x00,0x00,0x0e,0x00,0x00,0x00
,0x07,0x00,0x7f,0xe0,0x07,0x00,0x00,0x00
,0x06,0x01,0xff,0xf8,0x03,0x00,0x00,0x00
,0x0c,0x03,0xc0,0x3c,0x03,0x80,0x00,0x00
,0x1c,0x0f,0x00,0x0e,0x01,0x80,0x00,0x00
,0x18,0x0c,0x00,0x03,0x00,0xc0,0x00,0x00
,0x18,0x18,0x00,0x01,0x80,0xc0,0x00,0x00
,0x30,0x38,0x00,0x01,0xc0,0xe0,0x00,0x00
,0x30,0x30,0x0f,0x00,0xc0,0x60,0x00,0x00
,0x30,0x30,0x3f,0xc0,0xe0,0x60,0x00,0x00
,0x70,0x60,0x78,0xe0,0x60,0x60,0x00,0x00
,0x60,0x60,0x60,0x60,0x60,0x70,0x00,0x00
,0x60,0x60,0x60,0x60,0x60,0x30,0x00,0x00
,0x60,0x60,0x60,0x60,0x30,0x30,0x00,0x00
,0x60,0x60,0x60,0x30,0x30,0x20,0x00,0x00
,0x60,0x60,0x60,0x30,0x30,0x01,0xe0,0x00
,0x60,0x60,0x60,0x30,0x30,0x0f,0xfc,0x00
,0x60,0x60,0x60,0x30,0x30,0x3f,0xff,0x00
,0x60,0x60,0x60,0x30,0x18,0x78,0x03,0x80
,0x60,0x60,0x60,0x30,0x1c,0x60,0x01,0x80
,0x60,0x60,0x30,0x38,0x0c,0xc0,0x00,0xc0
,0x00,0x60,0x30,0x18,0x00,0xc0,0x00,0xc0
,0x00,0x60,0x30,0x18,0x00,0xc0,0x00,0xc0
,0x00,0xe0,0x30,0x0c,0x01,0xc0,0x00,0xe0
,0x00,0xc0,0x18,0x0e,0x01,0xc0,0x00,0xe0
,0x60,0xc0,0x18,0x07,0x01,0xc0,0x00,0xe0
,0x01,0xc0,0x1c,0x03,0x81,0xc0,0x00,0xe0
,0x01,0x80,0x0c,0x01,0xc1,0xc0,0x00,0xe0
,0x03,0x80,0x0e,0x00,0xf1,0xc0,0x00,0xe0
,0x0f,0x00,0x06,0x00,0x01,0xc0,0x00,0xe0
,0x3e,0x01,0x03,0x00,0x01,0xc0,0x00,0xe0
,0x30,0x03,0x83,0x80,0x1f,0xff,0xff,0xfe
,0x00,0x03,0x81,0xc0,0x3f,0xff,0xff,0xff
,0x00,0x07,0xc0,0xe0,0x30,0x00,0x00,0x03
,0x00,0x0e,0xc0,0x78,0x30,0x00,0x00,0x03
,0x00,0x3c,0x60,0x1e,0x30,0x00,0x00,0x03
,0x00,0x78,0x70,0x0f,0x30,0x00,0x00,0x03
,0x03,0xe0,0x38,0x03,0x30,0x00,0x00,0x03
,0x07,0x80,0x1c,0x00,0x30,0x00,0x00,0x03
,0xc0,0x00,0x0f,0x00,0x30,0x00,0x00,0x03
,0xc0,0x00,0x03,0x80,0x30,0x01,0xe0,0x03
,0x00,0x18,0x01,0xe0,0x30,0x03,0xf0,0x03
,0x00,0x18,0x00,0x7c,0x30,0x07,0x38,0x03
,0x00,0x0c,0x00,0x1f,0x30,0x06,0x18,0x03
,0x18,0x0e,0x00,0x07,0x30,0x06,0x18,0x03
,0x0c,0x07,0x80,0x00,0x30,0x07,0x38,0x03
,0x0e,0x03,0xc0,0x00,0x30,0x03,0x30,0x03
,0x07,0x00,0xf0,0x00,0x30,0x03,0x30,0x03
,0x03,0x00,0x7e,0x00,0x30,0x03,0x30,0x03
,0x01,0x80,0x1f,0xc0,0x30,0x03,0x30,0x03
,0x01,0xc0,0x03,0xe1,0x30,0x07,0xf8,0x03
,0x00,0xf0,0x00,0x01,0x30,0x03,0xf0,0x03
,0x00,0x38,0x00,0x00,0x30,0x00,0x00,0x03
,0x00,0x1e,0x00,0x00,0x30,0x00,0x00,0x03
,0x00,0x07,0xc0,0x00,0x30,0x00,0x00,0x03
,0x00,0x01,0xff,0x80,0x3f,0xff,0xff,0xff
,0x00,0x00,0x3f,0x80,0x1f,0xff,0xff,0xfe
};
const uint8_t PROGMEM FinPr_scan_bits[] = {
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x1f,0xf8,0x00,0x00,0x00
,0x00,0x00,0x00,0x7f,0xff,0x00,0x00,0x00
,0x00,0x00,0x01,0xfc,0x7f,0xc0,0x00,0x00
,0x00,0x00,0x03,0xc0,0x03,0xe0,0x00,0x00
,0x00,0x00,0x07,0x80,0x00,0xf0,0x00,0x00
,0x00,0x00,0x0e,0x00,0x00,0x3c,0x00,0x00
,0x00,0x00,0x1c,0x1f,0xfc,0x1c,0x00,0x00
,0x00,0x00,0x38,0x7f,0xfe,0x0e,0x00,0x00
,0x00,0x00,0x78,0xf8,0x0f,0x87,0x00,0x00
,0x00,0x00,0x71,0xe0,0x03,0xc7,0x00,0x00
,0x00,0x00,0xe3,0x80,0x01,0xc3,0x80,0x00
,0x00,0x00,0xc3,0x83,0xc0,0xe3,0x80,0x00
,0x00,0x00,0xc7,0x0f,0xf0,0x71,0x80,0x00
,0x00,0x00,0x06,0x1f,0xf8,0x71,0xc0,0x00
,0x00,0x00,0x0e,0x1c,0x3c,0x31,0xc0,0x00
,0x00,0x00,0x1c,0x38,0x1c,0x31,0xc0,0x00
,0x00,0x00,0x38,0x70,0x0e,0x39,0xc0,0x00
,0x00,0x01,0xf0,0x71,0x8e,0x39,0xc0,0x00
,0x00,0x03,0xe0,0xe1,0x86,0x31,0xc0,0x00
,0x00,0x03,0x81,0xe3,0x8e,0x31,0x80,0x00
,0x00,0x00,0x03,0xc3,0x8e,0x33,0x80,0x00
,0x00,0x00,0x07,0x87,0x0c,0x73,0x80,0x00
,0x00,0x00,0x1f,0x0e,0x1c,0x73,0x80,0x00
,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xfe
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xfe
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x03,0xf0,0x1e,0x3e,0x1c,0x00,0x00
,0x00,0x03,0x80,0x7c,0x77,0x0f,0x00,0x00
,0x00,0x00,0x01,0xf0,0xe3,0x07,0xc0,0x00
,0x00,0x00,0x07,0xe3,0xc3,0x81,0xf0,0x00
,0x00,0x00,0x3f,0x87,0x81,0xc0,0x60,0x00
,0x00,0x01,0xfc,0x1f,0x00,0xf0,0x00,0x00
,0x00,0x01,0xe0,0x3c,0x00,0x7c,0x00,0x00
,0x00,0x00,0x00,0xf8,0x78,0x1f,0x00,0x00
,0x00,0x00,0x07,0xe0,0xfc,0x0f,0xc0,0x00
,0x00,0x00,0x3f,0x83,0xef,0x03,0xc0,0x00
,0x00,0x00,0xfc,0x0f,0x87,0x80,0x00,0x00
,0x00,0x00,0x70,0x1f,0x03,0xe0,0x00,0x00
,0x00,0x00,0x00,0x7c,0x00,0xf8,0x00,0x00
,0x00,0x00,0x01,0xf0,0x00,0x3e,0x00,0x00
,0x00,0x00,0x0f,0xc0,0xf8,0x0f,0x00,0x00
,0x00,0x00,0x1f,0x03,0xfe,0x02,0x00,0x00
,0x00,0x00,0x0c,0x0f,0x8f,0x80,0x00,0x00
,0x00,0x00,0x00,0x3f,0x03,0xe0,0x00,0x00
,0x00,0x00,0x00,0xf8,0x00,0xf0,0x00,0x00
,0x00,0x00,0x01,0xe0,0x00,0x30,0x00,0x00
,0x00,0x00,0x01,0xc0,0xf8,0x00,0x00,0x00
,0x00,0x00,0x00,0x07,0xfe,0x00,0x00,0x00
,0x00,0x00,0x00,0x0f,0x8e,0x00,0x00,0x00
,0x00,0x00,0x00,0x06,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
};
const unsigned char fingerprint_deleted [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0x3f, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xe1, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x83, 0xf0, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x0f, 0x80, 0x0f, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x1e, 0x00, 0x03, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfe, 0x38, 0x1f, 0xc1, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0x70, 0xff, 0xf8, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf8, 0xe1, 0xfc, 0x7c, 0x79, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf8, 0xc3, 0xf8, 0x1e, 0x38, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf1, 0xc7, 0x3c, 0x07, 0x1c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf1, 0x8e, 0x3f, 0xc3, 0x9c, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf3, 0x9c, 0x3f, 0xe1, 0x8e, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xe3, 0x1c, 0xf0, 0xf1, 0xce, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xe3, 0x18, 0xe0, 0x38, 0xc6, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xe7, 0x39, 0xc2, 0x18, 0xc6, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xe7, 0x39, 0x8f, 0x9c, 0xe6, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xe7, 0x31, 0x8d, 0x8c, 0xe6, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xe6, 0x31, 0x98, 0x8c, 0xe6, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xe6, 0x31, 0xf8, 0x8c, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xc6, 0x31, 0xf9, 0x8c, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xc6, 0x33, 0xf8, 0x9c, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xce, 0x73, 0xf9, 0x9c, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0x8c, 0x73, 0xb9, 0x9c, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0x9c, 0x63, 0x19, 0x9c, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf8, 0xe7, 0x31, 0x1f, 0x81, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf8, 0xc6, 0x33, 0x1e, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf1, 0xce, 0x33, 0x3c, 0x18, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xe3, 0x8c, 0x62, 0x38, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xe7, 0x1c, 0x66, 0x31, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfe, 0x3c, 0xc6, 0x71, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0x38, 0xcf, 0x63, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0x71, 0x8f, 0xe7, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0xe3, 0x9f, 0xe4, 0x00, 0x27, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xc7, 0x1f, 0xe4, 0x00, 0x27, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x8e, 0x33, 0xe4, 0x00, 0x27, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x9c, 0x63, 0x87, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf8, 0xe7, 0x83, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf9, 0xc7, 0x13, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x8e, 0x31, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xde, 0x78, 0x7e, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
const unsigned char enter_password [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf9, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xe6, 0x03, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xc8, 0xfc, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xb7, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x7f, 0xff, 0xcb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfe, 0x9f, 0xff, 0xe5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfe, 0xbf, 0xff, 0xf5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfd, 0x7f, 0xff, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x7f, 0xff, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfe, 0xff, 0xff, 0xfd, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfa, 0xff, 0xff, 0xfd, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfa, 0xff, 0xff, 0xfd, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfa, 0xff, 0xff, 0xfd, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfa, 0xff, 0xff, 0xfd, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfa, 0xff, 0xff, 0xfd, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfa, 0x55, 0x55, 0x32, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfa, 0xb5, 0x52, 0xc9, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfa, 0xba, 0xa9, 0x32, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf8, 0xba, 0x84, 0xd9, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfd, 0x55, 0x5b, 0xf6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfd, 0xd4, 0x24, 0xc9, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfa, 0xea, 0x97, 0x25, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfa, 0xa9, 0x6e, 0xd2, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfd, 0x54, 0x93, 0x29, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfd, 0x0a, 0x4c, 0x9d, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfa, 0xa5, 0xb3, 0xcb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf9, 0xd2, 0x5c, 0xeb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfd, 0xb9, 0x3e, 0x55, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfa, 0x9e, 0xcd, 0x55, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf9, 0xc9, 0x72, 0x85, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0xe4, 0xea, 0xa1, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfa, 0x59, 0x22, 0xa9, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfd, 0x24, 0xca, 0xa1, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfe, 0x93, 0x10, 0x35, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf9, 0x6c, 0xdd, 0x7d, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfc, 0x9b, 0x02, 0x7d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfe, 0x4c, 0xfc, 0xaa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfd, 0x93, 0x03, 0x4a, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xfe, 0x4c, 0x7c, 0x95, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf3, 0x33, 0x29, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xcf, 0x78, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xb3, 0x83, 0x27, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xcc, 0x10, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xf1, 0xc7, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
const unsigned char ready_to_enroll [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xc0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xc0, 0xe3, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xc0, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 
	0xc0, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xc0, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xfe, 0x1f, 0xc0, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xc0, 0xe3, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfe, 0x1f, 0xc0, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xc0, 0xe3, 0xff, 
	0xf0, 0xff, 0xe0, 0x00, 0x3e, 0x1f, 0xc0, 0xe3, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0xfe, 0x1f, 0xc0, 
	0xe3, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xfe, 0x1f, 0xc0, 0xe3, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xfe, 
	0x1f, 0xc0, 0xe3, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xfe, 0x1f, 0xc0, 0xe3, 0xff, 0x80, 0x3f, 0xff, 
	0xff, 0xfe, 0x1f, 0xc0, 0xe3, 0xff, 0x80, 0x3f, 0xe0, 0x00, 0x3e, 0x1f, 0xc0, 0xe3, 0xff, 0x80, 
	0x3f, 0xff, 0xff, 0xfe, 0x1f, 0xc0, 0xe3, 0xff, 0x80, 0x3f, 0xff, 0xff, 0xfe, 0x1f, 0xc0, 0xe3, 
	0xff, 0xc0, 0x7f, 0xff, 0xff, 0xfe, 0x1f, 0xc0, 0xe3, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0xfe, 0x1f, 
	0xc0, 0xe3, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xc0, 0xe3, 0xff, 0xf1, 0xff, 0xff, 0xff, 
	0xfe, 0x1f, 0xc0, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x1f, 0xc0, 0xe3, 0xff, 0xff, 0xff, 
	0xff, 0xc0, 0x06, 0x1f, 0xc0, 0xe3, 0xff, 0x9f, 0x3f, 0xff, 0x00, 0x00, 0x1f, 0xc0, 0xe3, 0xfc, 
	0x00, 0x07, 0xfc, 0x1f, 0xf8, 0x1f, 0xc0, 0xe3, 0xf8, 0x00, 0x03, 0xf8, 0x7f, 0xfe, 0x1f, 0xc0, 
	0xe3, 0xf0, 0x00, 0x01, 0xf1, 0xff, 0xff, 0x1f, 0xc0, 0xe3, 0xe0, 0x00, 0x00, 0xe3, 0xff, 0xff, 
	0x8f, 0xc0, 0xe3, 0xe0, 0x00, 0x00, 0xc7, 0xff, 0xff, 0xc7, 0xc0, 0xe3, 0xff, 0xff, 0xff, 0xcf, 
	0xfc, 0x7f, 0xe7, 0xc0, 0xe3, 0xff, 0xff, 0xff, 0x8f, 0xfc, 0x7f, 0xf3, 0xc0, 0xe3, 0xff, 0xff, 
	0xff, 0x9f, 0xfc, 0x7f, 0xf3, 0xc0, 0xe3, 0xff, 0xff, 0xff, 0x1f, 0xfc, 0x7f, 0xf9, 0xc0, 0xe3, 
	0xff, 0xff, 0xff, 0x3f, 0xfc, 0x7f, 0xf9, 0xc0, 0xe3, 0xff, 0xff, 0xff, 0x3f, 0xfc, 0x7f, 0xf9, 
	0xc0, 0xe3, 0xff, 0xff, 0xff, 0x3f, 0xfc, 0x3f, 0xf9, 0xc0, 0xe3, 0xff, 0x03, 0xff, 0x3e, 0x00, 
	0x00, 0xf9, 0xc0, 0xe3, 0xfe, 0x01, 0xff, 0x3e, 0x00, 0x00, 0xf9, 0xc0, 0xe3, 0xfc, 0x00, 0xff, 
	0x3e, 0x00, 0x00, 0xf9, 0xc0, 0xe3, 0xfc, 0x30, 0xff, 0x3f, 0xfc, 0x3f, 0xf9, 0xc0, 0xe3, 0xfc, 
	0x78, 0xff, 0x3f, 0xfc, 0x7f, 0xf9, 0xc0, 0xe3, 0xfc, 0x78, 0xff, 0x3f, 0xfc, 0x7f, 0xf9, 0xc0, 
	0xe3, 0xf8, 0x78, 0x7f, 0x1f, 0xfc, 0x7f, 0xf9, 0xc0, 0xe0, 0x00, 0x78, 0x00, 0x1f, 0xfc, 0x7f, 
	0xf3, 0xc0, 0xe0, 0x00, 0x78, 0x00, 0x0f, 0xfc, 0x7f, 0xf3, 0xc0, 0xe0, 0x00, 0x78, 0x00, 0x0f, 
	0xfc, 0x7f, 0xe7, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xfe, 0x7f, 0xc7, 0xc0, 0xff, 0xff, 0xff, 
	0xff, 0xe3, 0xff, 0xff, 0x8f, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0x1f, 0xc0, 0xff, 
	0xff, 0xff, 0xff, 0xf8, 0x7f, 0xfe, 0x3f, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xf8, 0x7f, 
	0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
	0x07, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0
};
const unsigned char enrolling [] PROGMEM = {
	0xff, 0xe0, 0x1f, 0xff, 0xff, 0x00, 0x03, 0xff, 0xfe, 0x1f, 0xe0, 0xff, 0xff, 0xff, 0xfc, 0x7f, 
	0xf7, 0xf0, 0x3f, 0x3f, 0xe7, 0x80, 0x0f, 0x9f, 0xcf, 0x1f, 0xef, 0xcf, 0x9c, 0x7f, 0xfc, 0xff, 
	0xb8, 0xf8, 0x7c, 0x7f, 0xf9, 0xf0, 0x0e, 0x73, 0xff, 0xff, 0xc7, 0x3b, 0xff, 0x3f, 0xf3, 0x99, 
	0xee, 0x78, 0x71, 0x99, 0xee, 0x70, 0x39, 0xdc, 0xce, 0xe7, 0x9d, 0xcc, 0xcc, 0xcf, 0xcc, 0xcc, 
	0xcc, 0xcf, 0xcc, 0x0c, 0xcc, 0xcc, 0xc0, 0x0c, 0xcc, 0xcc, 0xc7, 0xe0, 0xdc, 0xfc, 0xcf, 0xf0, 
	0x9d, 0xfc, 0x9e, 0x78, 0xf9, 0x9d, 0xbe, 0x7c, 0xf9, 0x99, 0x3e, 0x7c, 0xf3, 0x99, 0x30, 0x0c, 
	0xf7, 0x3b, 0x30, 0x0c, 0xfe, 0x33, 0x3e, 0x7c, 0xfe, 0x73, 0x3e, 0x7c, 0xfe, 0xe7, 0x1e, 0x79, 
	0xff, 0xce, 0x0f, 0xf3, 0xff, 0xcc, 0xc7, 0xe3, 0xff, 0xfc, 0xf0, 0x0f, 0xff, 0xff, 0xf8, 0x1f
};
const unsigned char uploading [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x80, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x0f, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x03, 0xf8, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0x03, 0xff, 0xff, 
	0xff, 0xff, 0xe0, 0x7f, 0xff, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xe0, 0xff, 0xff, 
	0xff, 0xff, 0xc1, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xfc, 0x83, 0xff, 0xff, 0xf8, 0x3f, 0xff, 
	0xff, 0xe0, 0x07, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0x80, 0x07, 0xff, 0xff, 0xfc, 0x1f, 0xff, 
	0xff, 0x00, 0x0f, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xfe, 0x07, 0x9f, 0xff, 0xff, 0xfe, 0x1f, 0xff, 
	0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 
	0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x03, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 
	0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x7f, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x1f, 
	0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x0f, 0xf8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 
	0xf0, 0x7f, 0xff, 0xfe, 0xff, 0xff, 0xff, 0x07, 0xe0, 0x7f, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0x83, 
	0xc0, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xc3, 0xc1, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xc1, 
	0x83, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xe1, 0x87, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xe0, 
	0x0f, 0xff, 0xff, 0x80, 0x01, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0x04, 0x00, 0xff, 0xff, 0xf0, 
	0x0f, 0xff, 0xfe, 0x0c, 0x20, 0x7f, 0xff, 0xf0, 0x1f, 0xff, 0xfc, 0x1c, 0x30, 0x3f, 0xff, 0xf0, 
	0x1f, 0xff, 0xf8, 0x3c, 0x38, 0x1f, 0xff, 0xf0, 0x1f, 0xff, 0xf0, 0x7c, 0x3c, 0x1f, 0xff, 0xf0, 
	0x1f, 0xff, 0xf8, 0xfc, 0x3e, 0x1f, 0xff, 0xf0, 0x0f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xe0, 
	0x0f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xe1, 0x0f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xe1, 
	0x07, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xc3, 0x87, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0x83, 
	0x83, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0x07, 0xc1, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xfe, 0x07, 
	0xe0, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xfc, 0x0f, 0xf0, 0x3f, 0xff, 0xfc, 0x3f, 0xff, 0xf0, 0x1f, 
	0xf8, 0x00, 0x00, 0x7c, 0x3c, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x3c, 0x38, 0x00, 0x00, 0xff, 
	0xfe, 0x00, 0x00, 0x3c, 0x38, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x00, 0x3c, 0x3c, 0x00, 0x0f, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
const unsigned char upload_done [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x03, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xc0, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x87, 0xf8, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x1f, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0x1f, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x7f, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xcf, 0xff, 0xff, 
	0xff, 0xff, 0xf9, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0xff, 0xe7, 0xff, 0xff, 
	0xff, 0xfc, 0x03, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xff, 0xf0, 0x7f, 0xff, 
	0xff, 0xf1, 0xff, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0x0f, 0xff, 
	0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xf3, 0xff, 0xe3, 0xff, 
	0xff, 0xcf, 0xff, 0xff, 0xe3, 0xff, 0xf3, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xc7, 0xff, 0xf1, 0xff, 
	0xff, 0xcf, 0xff, 0xe7, 0x8f, 0xff, 0xf9, 0xff, 0xff, 0x8f, 0xff, 0xe7, 0x1f, 0xff, 0xf9, 0xff, 
	0xff, 0x8f, 0xff, 0xe2, 0x3f, 0xff, 0xf9, 0xff, 0xff, 0xcf, 0xff, 0xf0, 0x7f, 0xff, 0xf9, 0xff, 
	0xff, 0xcf, 0xff, 0xf8, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 
	0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 
	0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 
	0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xc7, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0x0f, 0xff, 
	0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x7f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
const unsigned char marked [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xff, 0x80, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xe7, 0xff, 0x80, 0xff, 0xff, 0xff, 0xf0, 0x03, 0xff, 0xcf, 0xff, 0x80, 
	0xff, 0xff, 0xff, 0x80, 0x00, 0xff, 0x0f, 0xff, 0x80, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x3e, 0x1f, 
	0xff, 0x80, 0xff, 0xff, 0xfc, 0x07, 0xf0, 0x1c, 0x3f, 0xff, 0x80, 0xff, 0xff, 0xf8, 0x3f, 0xfe, 
	0x18, 0x7f, 0xff, 0x80, 0xff, 0xff, 0xf0, 0xff, 0xff, 0x20, 0x7f, 0xff, 0x80, 0xff, 0xff, 0xe1, 
	0xff, 0xff, 0xc0, 0xff, 0xff, 0x80, 0xff, 0xff, 0xc3, 0xff, 0xff, 0x81, 0xff, 0xff, 0x80, 0xff, 
	0xff, 0x83, 0xff, 0xff, 0x03, 0xff, 0xff, 0x80, 0xff, 0xff, 0x80, 0xff, 0xfc, 0x02, 0xff, 0xff, 
	0x80, 0xff, 0xff, 0x08, 0x7f, 0xf8, 0x04, 0x7f, 0xff, 0x80, 0xff, 0xff, 0x1c, 0x1f, 0xf0, 0x0c, 
	0x7f, 0xff, 0x80, 0xff, 0xff, 0x1e, 0x07, 0xe0, 0x1c, 0x7f, 0xff, 0x80, 0xff, 0xfe, 0x1f, 0x01, 
	0xc0, 0x3c, 0x3f, 0xff, 0x80, 0xff, 0xfe, 0x1f, 0x00, 0x00, 0x3e, 0x3f, 0xff, 0x80, 0xff, 0xfe, 
	0x3f, 0x80, 0x00, 0x7e, 0x3f, 0xff, 0x80, 0xff, 0xfe, 0x3f, 0xc0, 0x00, 0xfe, 0x3f, 0xff, 0x80, 
	0xff, 0xfe, 0x3f, 0xc0, 0x01, 0xfe, 0x3f, 0xff, 0x80, 0xff, 0xfe, 0x3f, 0xe0, 0x01, 0xfe, 0x3f, 
	0xff, 0x80, 0xff, 0xfe, 0x3f, 0xf0, 0x03, 0xfe, 0x3f, 0xff, 0x80, 0xff, 0xfe, 0x1f, 0xf0, 0x07, 
	0xfc, 0x3f, 0xff, 0x80, 0xff, 0xfe, 0x1f, 0xf8, 0x0f, 0xfc, 0x3f, 0xff, 0x80, 0xff, 0xff, 0x1f, 
	0xfc, 0x0f, 0xfc, 0x7f, 0xff, 0x80, 0xff, 0xff, 0x0f, 0xfc, 0x1f, 0xf8, 0x7f, 0xff, 0x80, 0xff, 
	0xff, 0x8f, 0xfe, 0x3f, 0xf8, 0xff, 0xff, 0x80, 0xff, 0xff, 0x87, 0xff, 0x7f, 0xf0, 0xff, 0xff, 
	0x80, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xe1, 0xff, 0xff, 0x80, 0xff, 0xff, 0xc1, 0xff, 0xff, 0xc1, 
	0xff, 0xff, 0x80, 0xff, 0xff, 0xe0, 0xff, 0xff, 0x83, 0xff, 0xff, 0x80, 0xff, 0xff, 0xf0, 0x7f, 
	0xff, 0x07, 0xff, 0xff, 0x80, 0xff, 0xff, 0xf8, 0x1f, 0xfc, 0x0f, 0xff, 0xff, 0x80, 0xff, 0xff, 
	0xfc, 0x00, 0x00, 0x1f, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x80, 
	0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 
	0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80
};
const unsigned char sensor_error[] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xfc, 0x0f, 0xff, 0xff, 0xc0, 0xff, 0xff, 
	0xc0, 0x01, 0xff, 0xff, 0xc0, 0xff, 0xff, 0x00, 0x00, 0x3f, 0xff, 0xc0, 0xff, 0xfe, 0x03, 0xf0, 
	0x1f, 0xff, 0xc0, 0xff, 0xf8, 0x1f, 0xfe, 0x07, 0xff, 0xc0, 0xff, 0xf0, 0x7f, 0xff, 0x83, 0xff, 
	0xc0, 0xff, 0xe0, 0xf0, 0x07, 0xc1, 0xff, 0xc0, 0xff, 0xe1, 0xc0, 0x01, 0xe1, 0xff, 0xc0, 0xff, 
	0xc3, 0x80, 0x00, 0x70, 0xff, 0xc0, 0xff, 0x87, 0x07, 0xf8, 0x38, 0x7f, 0xc0, 0xff, 0x8e, 0x1f, 
	0xfe, 0x1c, 0x7f, 0xc0, 0xff, 0x0e, 0x3c, 0x0f, 0x1c, 0x3f, 0xc0, 0xff, 0x1c, 0x78, 0xc7, 0x8e, 
	0x3f, 0xc0, 0xff, 0x1c, 0x73, 0xf3, 0x8e, 0x3f, 0xc0, 0xff, 0x18, 0xe7, 0xf9, 0xc6, 0x3f, 0xc0, 
	0xfe, 0x38, 0xe7, 0x38, 0xc7, 0x1f, 0xc0, 0xfe, 0x38, 0xce, 0x1c, 0xc7, 0x1f, 0xc0, 0xff, 0xf0, 
	0xce, 0x1c, 0xc7, 0x1f, 0xc0, 0xff, 0xf1, 0xdc, 0x0e, 0xc7, 0x1f, 0xc0, 0xff, 0xe1, 0x98, 0x07, 
	0xc7, 0x1f, 0xc0, 0xfe, 0x03, 0xb8, 0x07, 0xc7, 0x1f, 0xc0, 0xfc, 0x07, 0x70, 0xc3, 0xc7, 0x1f, 
	0xc0, 0xfe, 0x0f, 0x71, 0xe3, 0xc7, 0x1f, 0xc0, 0xff, 0xfe, 0xe1, 0xe1, 0xc6, 0x3f, 0xc0, 0xff, 
	0xf8, 0xc1, 0xe0, 0xc6, 0x3f, 0xc0, 0xff, 0xc1, 0xc1, 0xe0, 0xe7, 0x1f, 0xc0, 0xfc, 0x03, 0x81, 
	0xe0, 0x77, 0x0f, 0xc0, 0xfc, 0x03, 0x80, 0xc0, 0x73, 0x8f, 0xc0, 0xfc, 0x3f, 0x00, 0xc0, 0x3b, 
	0xdf, 0xc0, 0xff, 0xff, 0x00, 0xc0, 0x39, 0xff, 0xc0, 0xff, 0xee, 0x00, 0xc0, 0x1c, 0x7f, 0xc0, 
	0xfe, 0x0c, 0x00, 0x00, 0x0c, 0x1f, 0xc0, 0xfc, 0x1c, 0x01, 0xe0, 0x0e, 0x0f, 0xc0, 0xfe, 0x38, 
	0x01, 0xe0, 0x07, 0x1f, 0xc0, 0xff, 0xf8, 0x01, 0xe0, 0x07, 0xff, 0xc0, 0xff, 0xf0, 0x00, 0x00, 
	0x03, 0xff, 0xc0, 0xff, 0x70, 0x00, 0x00, 0x03, 0xff, 0xc0, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0x1f, 
	0xc0, 0xfe, 0x3f, 0xff, 0xff, 0xff, 0x1f, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 
	0xfe, 0x00, 0x38, 0x0f, 0xff, 0xc0, 0xff, 0xe0, 0x03, 0xfe, 0x01, 0xff, 0xc0, 0xff, 0x80, 0x1f, 
	0xff, 0x80, 0x7f, 0xc0, 0xff, 0x80, 0xff, 0x03, 0xf0, 0x7f, 0xc0, 0xff, 0xdf, 0xf0, 0x00, 0x7e, 
	0xff, 0xc0, 0xff, 0xff, 0x00, 0x00, 0x1f, 0xff, 0xc0, 0xff, 0xf8, 0x00, 0xfc, 0x07, 0xff, 0xc0, 
	0xff, 0xf0, 0x0f, 0xff, 0x03, 0xff, 0xc0, 0xff, 0xf0, 0x7f, 0x8f, 0xc3, 0xff, 0xc0, 0xff, 0xff, 
	0xf8, 0x01, 0xff, 0xff, 0xc0, 0xff, 0xff, 0x80, 0x00, 0x7f, 0xff, 0xc0, 0xff, 0xff, 0x00, 0x70, 
	0x3f, 0xff, 0xc0, 0xff, 0xff, 0x87, 0xfc, 0x7f, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0
};
const unsigned char image_taken [] PROGMEM = {
	0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xe0, 0x0f, 0xe1, 0xcf, 0xff, 0xff, 0xff, 0xff, 0x81, 0xff, 0xff, 0xc1, 0xff, 0xff, 0xff, 
	0xff, 0x0f, 0xf0, 0x0f, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x3e, 0x00, 0x00, 0xf9, 0xff, 0xff, 0xff, 
	0xff, 0xf8, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0xc7, 0xff, 0xff, 0xff, 
	0xff, 0x83, 0xfe, 0xff, 0xc1, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xf0, 0x01, 0xf0, 0x7f, 0xff, 0xff, 
	0xfc, 0x3c, 0x30, 0x00, 0x3c, 0x3f, 0xff, 0xff, 0xf8, 0xf0, 0x3f, 0xf8, 0x0e, 0x1f, 0xff, 0xff, 
	0xe1, 0xc1, 0xff, 0xff, 0x83, 0x8f, 0xff, 0xff, 0xe3, 0x87, 0xc0, 0x77, 0xe1, 0xc7, 0xff, 0xff, 
	0xc7, 0x9f, 0x00, 0x70, 0xf0, 0xe3, 0xff, 0xff, 0xff, 0xfc, 0x0f, 0xf0, 0x3c, 0x71, 0xff, 0xff, 
	0xfd, 0xf0, 0x7f, 0xfe, 0x0e, 0x39, 0xff, 0xff, 0xf9, 0xe1, 0xf1, 0x8f, 0x8f, 0x1f, 0xff, 0xff, 
	0xf1, 0xc7, 0x81, 0x81, 0xff, 0x8f, 0xff, 0xff, 0xe3, 0x8f, 0x03, 0xc0, 0xfd, 0xc7, 0xff, 0xff, 
	0xc7, 0x1f, 0xbf, 0xf8, 0x38, 0xe7, 0xff, 0xff, 0xc6, 0x39, 0xfc, 0x3e, 0x1c, 0x63, 0xff, 0xff, 
	0x8c, 0x71, 0xe0, 0x07, 0x8e, 0x33, 0xff, 0xff, 0x9c, 0xe3, 0x80, 0x01, 0xc6, 0x31, 0xff, 0xff, 
	0x18, 0xc7, 0x0f, 0xf0, 0xe3, 0x19, 0xff, 0xff, 0x19, 0x8e, 0x3f, 0xfc, 0x63, 0x98, 0xff, 0xff, 
	0x31, 0x8c, 0x70, 0x0e, 0x31, 0x9c, 0xff, 0xff, 0xf3, 0x18, 0xe0, 0x07, 0x19, 0x8c, 0xff, 0xff, 
	0xf3, 0x19, 0xc7, 0xc3, 0x18, 0xcc, 0xff, 0xff, 0xe3, 0x31, 0x8f, 0xf1, 0x88, 0xcc, 0x7f, 0xff, 
	0xe3, 0x33, 0x1c, 0x39, 0x8c, 0xc4, 0x7f, 0xff, 0xe6, 0x33, 0x18, 0x18, 0xcc, 0xc6, 0x7f, 0xff, 
	0xe6, 0x33, 0x31, 0x98, 0xcc, 0xef, 0xff, 0xff, 0xe6, 0x33, 0x33, 0x8c, 0xcf, 0xff, 0xff, 0xff, 
	0xe6, 0x33, 0x33, 0x8c, 0xcf, 0xff, 0xff, 0xff, 0xe6, 0x33, 0x33, 0x8c, 0xcf, 0xff, 0xff, 0xff, 
	0xe6, 0x33, 0x33, 0x8c, 0xcf, 0xfe, 0x07, 0xff, 0xe6, 0x33, 0x33, 0x8c, 0xcf, 0xf0, 0x00, 0xff, 
	0xfe, 0x33, 0x33, 0x8c, 0xcf, 0xc0, 0x60, 0x3f, 0xfe, 0x33, 0x33, 0x8c, 0xef, 0x87, 0xfe, 0x1f, 
	0xfe, 0x33, 0x33, 0x8c, 0xff, 0x1f, 0xff, 0x8f, 0xfe, 0x33, 0x33, 0x8c, 0xfe, 0x3f, 0xff, 0xc7, 
	0xfe, 0x33, 0x33, 0x8c, 0x7c, 0x7f, 0xff, 0xe3, 0xff, 0x73, 0x33, 0xcc, 0x7c, 0xff, 0xff, 0xf3, 
	0xff, 0xf3, 0x33, 0xce, 0x78, 0xff, 0xff, 0xf1, 0xff, 0xf3, 0x31, 0xc6, 0x79, 0xff, 0xff, 0x39, 
	0xfe, 0x73, 0x31, 0xe7, 0xf9, 0xff, 0xfe, 0x38, 0xfe, 0x33, 0x39, 0xe3, 0xf1, 0xff, 0xfc, 0x38, 
	0xfe, 0x33, 0x18, 0xf1, 0xf1, 0xff, 0xf8, 0x7c, 0xfe, 0x33, 0x18, 0xf0, 0xf3, 0xff, 0xf1, 0xfc, 
	0xfe, 0x33, 0x9c, 0x78, 0x73, 0xff, 0xe1, 0xfc, 0xfe, 0x31, 0x8e, 0x3e, 0x73, 0xdf, 0xc7, 0xfc, 
	0xff, 0x31, 0xc7, 0x1f, 0xf1, 0x8f, 0x87, 0xf8, 0xff, 0x38, 0xc3, 0x8f, 0xf1, 0xc7, 0x1f, 0xf8, 
	0xff, 0xf8, 0xe1, 0xc3, 0xf9, 0xe0, 0x1f, 0xf9, 0xff, 0xfc, 0x70, 0xe1, 0xf8, 0xf0, 0x3f, 0xf1, 
	0xff, 0xfe, 0x1c, 0x70, 0xfc, 0xf8, 0x7f, 0xf3, 0xff, 0xff, 0x0e, 0x1c, 0x7c, 0x7f, 0xff, 0xe3, 
	0xff, 0xff, 0x87, 0x0e, 0x3e, 0x3f, 0xff, 0xc7, 0xff, 0xff, 0xe3, 0x87, 0x7f, 0x1f, 0xff, 0x8f, 
	0xff, 0xff, 0xf1, 0xe3, 0xff, 0x87, 0xfe, 0x1f, 0xff, 0xff, 0xf8, 0x71, 0xff, 0xc0, 0xf8, 0x3f, 
	0xff, 0xff, 0xfc, 0x39, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 0xfe, 0x3f, 0xff, 0xfc, 0x03, 0xff
};
////////////////////////////////////-----------------------------------------------------//////////////////////////////////////////////////////////////

/////////////////////////////////////////////////                   Setup Function
void setup()
{
  Serial.begin(9600);
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  display.display();
  delay(200);
  Serial.println("Makers Digest: Ready");
  delay(300);
  display.clearDisplay();
  if (!mcp.begin_I2C(0x20)) {
    Serial.println("Error.");
    ESP.wdtFeed();
    while (1);
  }
  mcp.pinMode(c1, INPUT);
  mcp.pinMode(c2, INPUT);
  mcp.pinMode(c3, INPUT);
  mcp.pinMode(c4, INPUT);
  mcp.pinMode(r1, OUTPUT);
  mcp.pinMode(r2, OUTPUT);
  mcp.pinMode(r3, OUTPUT);
  mcp.pinMode(r4, OUTPUT);
  mcp.pinMode(buzzer, OUTPUT);
  delay(200);
  Serial.println("\n\nFingerprint sensor enrollment");
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.println("Fingermark");
  display.setCursor(0,20);
  display.println("sensor ");
  display.setCursor(0,40);
  display.println("enrollment");
  display.display();
  delay(1000);
  finger.begin(57600);
  if (finger.verifyPassword()){
    Serial.println("Found fingerprint sensor!");
  } 
  else{
    Serial.println("Did not find fingerprint sensor :(");
    Disp(0,0,"Trying\njust\na\nsecond",0);
    display.drawBitmap( 80, 0, sensor_error, 50, 64, WHITE);
    display.display();
    delay(500);
    while (1){ESP.wdtFeed();}
  }
  Serial.println(F("Reading sensor parameters"));
  finger.getParameters();
  Serial.print(F("Status: 0x")); Serial.println(finger.status_reg, HEX);
  Serial.print(F("Sys ID: 0x")); Serial.println(finger.system_id, HEX);
  Serial.print(F("Capacity: ")); Serial.println(finger.capacity);
  Serial.print(F("Security level: ")); Serial.println(finger.security_level);
  Serial.print(F("Device address: ")); Serial.println(finger.device_addr, HEX);
  Serial.print(F("Packet len: ")); Serial.println(finger.packet_len);
  Serial.print(F("Baud rate: ")); Serial.println(finger.baud_rate);
  finger.getTemplateCount();
  if (finger.templateCount == 0){
    Serial.print("Sensor doesn't contain any fingerprint data. Please run the 'enroll' example.");
  }
  else{
    Serial.println("Waiting for valid finger...");
    delay(1000);
      Serial.print("Sensor contains ");
      delay(1000);
      Serial.println(finger.templateCount);
      Serial.println(" templates");
  }

  //CONNECT TO THE WIFI
  Serial.println("What is your WIFI network:");
  Disp(0,0, "What is your WIFI\nNetwork:", 0);
  delay(200);
  Serial.println("1.WLAN (Require SSID,password)");
  Disp(0,20, "1.WLAN(SSID,password)",1);
  delay(200);
  Serial.println("2.WPA2 (Require SSID,password,username)");
  Disp(0,30, "2.WPA2(SSID,password,\nusername)",1);
  delay(200);
  Serial.println("Enter the option: (1 or 2)");
  Disp(0,50, "Enter the option(1/2)", 1 );
  delay(200);

wifi_retry:
  char WIFI = keypad();
  while(WIFI == 'Y')
  {
    WIFI = keypad();
    ESP.wdtFeed();
  }
  if(WIFI == '1')
  {
    String SSID,Password;
    char temp;
    Serial.println("Enter the SSID:");
    Disp(0,0, "Enter the SSID: \n(Press '*' to enter)", 0);
    SSID = String_keypad();
    Serial.println("Enter the Password:");
    Disp(0,0, "Enter the Password: \n(Press '*' to enter)", 0);
    Password = String_keypad();
    WiFi.begin(SSID,Password);           
    Serial.print("Connecting to ");
    Serial.print(SSID); Serial.println(" ...");
    int i = 0;
  
    while (WiFi.status() != WL_CONNECTED) 
    { // Wait for the Wi-Fi to connect
      Disp(10,0,"Connecting....",0);
      display.drawBitmap( 40, 10, Wifi_start_bits, 54, 49, WHITE);
      display.display();
      delay(1000);
      Serial.print(++i); Serial.print(' ');
      // Disp(0,0, "Connecting...", 0);
      delay(500);
    }
    Serial.println('\n');
    Serial.println("Connection established!");  
    Serial.print("IP address:\t");
    Serial.println(WiFi.localIP());
    Disp(0,0,"Connected to:",0);
    Disp(0,10,String(SSID),1);
    display.drawBitmap( 60, 10, Wifi_connected_bits, 63, 49, WHITE);
    display.display();
    delay(500);
  }  
  else if(WIFI == '2')
  {
    connectEduroam(ssid,username,password); 
    Disp(0,20,"Connected to:",0);
    Disp(0,30,"Eduroam",0);  
    delay(500);
  }
  else
  {
    Disp(0,20,"Connection \nfailed!!",0);
    delay(800);
    Disp(0,20,"Connecting \nAgain...",0);
    goto wifi_retry;  
  }

  Google_Sheets_Init(column_name_in_sheets, Sheets_GAS_ID, 1 );
  Serial.print("Initializing SD card...");
  if (!SD.begin(15)) {
    Serial.println("initialization failed!");
    while (1){ESP.wdtFeed();}
  }    
  Serial.println("initialization done.");
  Disp(0,20, "Initialization Done", 0);
  // add buzzer
  Disp(0,20,"HOST place \nyour thumb \non sensor",0);
  delay(1000);   
  Enroll();
}
/////////////////////////////////////////////////////////
//////////////////////////////////////////////// Loop 
void loop()
{
  int out = readFing();
  ESP.wdtFeed();
  if(out == 1)
  {
    Serial.println("ECD");
    Disp(0,0, "Press #A to ENROLL", 0);
    Disp(0,10, "Press #B to Delete", 1);
    Disp(0,20, "Press #C to Upload", 1);
    Disp(0,30,"Press #007 to RESET",1);
    checkKeys();
  }    
}
///////////////////////////
///////////////////////////                                  All Required Functions.

void checkKeys()
{
  String checker;
  checker = String_keypad1();
  if(checker == "#A")         //Enroll #A
  {
    Serial.println("Enter the no of Enrollments:");
    Disp(0,0, "Enter the no of \nEnrollments\n(press * to continue)", 0);
    unsigned long num = atol(String_keypad().c_str()); 
    Serial.println(num);
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.setCursor(0,60);
    display.println(num);
    display.display();       
    Disp(0,10, "place thumb on sensor", 0);
    for(unsigned long i =1 ;i<=num ;i++)
    {
      Enroll();
      mcp.digitalWrite(buzzer, HIGH);
      delay(100);
      mcp.digitalWrite(buzzer, LOW);
    }
    return;
  }
  else if(checker == "#B")     // Delete fingerprint #B
  {
    delay(100);
    Serial.println("Delete fingerprint");
    Disp(0,20, "Delete fingerprint", 0);
    delfing();
    return;
  }
  else if(checker == "#C")    // Upload #C
  {
    delay(100);
    Serial.println("Please enter the Host fingerprint again for uploading:"); 
    Disp(0,10,".....................",0);
    Disp(10,20,"Uploading to Sheets",1);
    Disp(0,30,".....................",1);
    Upload_to_GoogleSheets();
    return;
  }
  else if(checker == "#007")  // Factory Reset
  {
    Disp(0,20,"Factory Reset !!",0);
    delay(200);
    rest();
  }
  return;
}
void Enroll(){
  Serial.println("Ready to enroll a fingerprint!");
  if (id == 1) {
    Serial.println("Host Fingerprint Password");
    display.drawBitmap( 70, 0, FinPr_scan_bits, FinPr_scan_width, FinPr_scan_height, WHITE);
    display.display();
    delay(1000);
    while (!  getFingerprintEnroll() );
    ESP.wdtFeed();
    Disp(0,20, "Host Fingerprint Registered!!", 0 );
    mcp.digitalWrite(buzzer, HIGH);
    delay(500);
    mcp.digitalWrite(buzzer, LOW);
    return;
  }
  while (!  getFingerprintEnroll() );
  return;
}
uint8_t getFingerprintEnroll(){
retry_enroll:
  int p = -1;
  while (p != FINGERPRINT_OK)
  {
    p = finger.getImage();
    switch (p)
    {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      Disp(0,20, "Image \ntaken", 0);
      display.drawBitmap( 70, 0, image_taken, 64, 64, WHITE);
      display.display();
      delay(1000);
      break;
    case FINGERPRINT_NOFINGER:
      Serial.println("No Finger");
      break;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      break;
    case FINGERPRINT_IMAGEFAIL:
      Serial.println("Imaging error");
      break;
    default:
      Serial.println("Unknown error");
      break;
    }
  }
  p = finger.image2Tz(1);
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      return p;
  }
  Serial.println("Remove finger");
  Disp(10,20, "Remove finger", 0);
  delay(1000);
  p = 0;
  while (p != FINGERPRINT_NOFINGER) {
    p = finger.getImage();
    ESP.wdtFeed();
  }
  Serial.print("ID "); 
  p = -1;
  
  Serial.println("Place same finger again");
  Disp(10,20, "Place Same Finger", 0);
  Disp(25,30, " again", 1);
  while (p != FINGERPRINT_OK) 
  {
    p = finger.getImage();
    switch (p) 
    {
      case FINGERPRINT_OK:
        delay(1000);
        Serial.println("Image taken");
        Disp(0,20,"Image\ntaken", 0);
        display.drawBitmap( 60, 0, image_taken, 64, 64, WHITE);
        display.display();
        delay(500);
        break;
      case FINGERPRINT_NOFINGER:
        Serial.print(".");
        break;
      case FINGERPRINT_PACKETRECIEVEERR:
        Serial.println("Communication error");
        break;
      case FINGERPRINT_IMAGEFAIL:
        Serial.println("Imaging error");
        break;
      default:
        Serial.println("Unknown error");
        break;
    }
    ESP.wdtFeed();
  }
  p = finger.image2Tz(2);
  switch (p) 
  {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    case FINGERPRINT_IMAGEMESS:
      Serial.println("Image too messy");
      return p;
    case FINGERPRINT_PACKETRECIEVEERR:
      Serial.println("Communication error");
      return p;
    case FINGERPRINT_FEATUREFAIL:
      Serial.println("Could not find fingerprint features");
      return p;
    case FINGERPRINT_INVALIDIMAGE:
      Serial.println("Could not find fingerprint features");
      return p;
    default:
      Serial.println("Unknown error");
      Disp(0,30, "Try Again",1);
      delay(500);      
      return p;
  }
  p = finger.createModel();
  if (p == FINGERPRINT_OK) 
  {
    Serial.println("Prints matched!");
    Disp(0,0, "Prints matched!",0);
    display.display();
    delay(700);
  } 
  else if (p == FINGERPRINT_PACKETRECIEVEERR) 
  {
    Serial.println("Communication error");
    Disp(0,0, "Communication error",0); 
    Disp(0,20, "Something Went Wrong",0); 
    Disp(0,30, "Try Again",1);
    delay(500);
    return p;
  } 
  else if (p == FINGERPRINT_ENROLLMISMATCH) 
  {
    Serial.println("Fingerprints did not match");
    Disp(0,10, "Fingerprints \ndid not match",0);
    Disp(0,30,"Please Try Again",1);
    delay(500);
    goto retry_enroll;    
    return p;
  } 
  else 
  {
    Serial.println("Unknown error");
    Disp(0,0, "Fingerprints \n did not match",0);
    Disp(0,20,"Please Try Again",1);
    delay(1000);
    goto retry_enroll;
    return p;
  }
  p = finger.storeModel(id);
  if (p == FINGERPRINT_OK) {
    Serial.println("Stored!");
    Disp(0,50, "Stored!",1); 
    display.display();
    delay(1000);
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
    return p;
  } else if (p == FINGERPRINT_BADLOCATION) {
    Serial.println("Could not store in that location");
    return p;
  } else if (p == FINGERPRINT_FLASHERR) {
    Serial.println("Error writing to flash");
    return p;
  }
  else {
    Serial.println("Unknown error");
    return p;
  }
  //////////////////////////////////////////////////////////////////////////////////
  if(id!=1)
  { 
    Serial.println("Enter the Roll no of the student:");
    Disp(0,10, "Enter the Roll No.:",0);
    rollNumber[id] = atol(String_keypad().c_str());
    Serial.println(rollNumber[id]);
    myFile = SD.open("ROLLnum.txt", FILE_WRITE);
    if (myFile) 
    {
      Serial.println("registering to sd");
      myFile.println(String(rollNumber[id]));
      //content("ROLLnum.txt");
      //close the file:
      myFile.close();
      Serial.println("done.");
      //Disp(10, "done.",0);
    } else {
      Serial.println("error opening test.txt");
    }
    Serial.println("Roll no registered!!");
    Serial.print("Biometric has been registerd of the student:");
    Disp(0,10, "Biometric has been \nregisterd of the \nstudent:",0);  
    Disp(0,40,String(rollNumber[id]),1);
    Serial.println(rollNumber[id]);
    delay(1000);
    Disp(0,10, "next student ...",0);  

  }
  else
  {
    Serial.println("Host Fingerprint have been Registered");
    Disp(0,10, "Host Fingerprint\nhave been \nRegistered",0);
    delay(500);
  }
  id+=1;
 //////////////////////////////////////////////////////////////////////////////////////
  return true;
}
void connectEduroam(const char* ssid,const char* username,const char* password){
  wifi_set_opmode(STATION_MODE);
  struct station_config wifi_config;
  memset(&wifi_config, 0, sizeof(wifi_config));
  strcpy((char *)wifi_config.ssid, ssid);
  wifi_station_set_config(&wifi_config);
  wifi_station_clear_cert_key();
  wifi_station_clear_enterprise_ca_cert();
  wifi_station_set_wpa2_enterprise_auth(1);
  wifi_station_set_enterprise_identity((uint8 *)username, strlen(username));
  wifi_station_set_enterprise_username((uint8 *)username, strlen(username));
  wifi_station_set_enterprise_password((uint8 *)password, strlen(password));
  wifi_station_connect();
  Serial.print("Wifi connecting...");
  Disp(0,0, "Wifi connecting ....",1);
  display.drawBitmap( 73, 10, Wifi_start_bits, Wifi_start_width, Wifi_start_height, WHITE);
  display.display(); 
  delay(1000);
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.println(".");
    Disp(0,0, "connecting ....",0);
    display.drawBitmap( 33, 15, Wifi_connected_bits, Wifi_connected_width, Wifi_connected_height, WHITE);
    display.display();
    delay(1000);
    ESP.wdtFeed();
  }
  Serial.println("IP address: ");
  Disp(0,0, "IP address: ",1);
  Serial.println(WiFi.localIP());
  Disp(0,10, "WiFi.localIP()",1);
  return;
}
void content(String file){
  File f = SD.open(file,FILE_READ);
  if(f)
  {
   while(f.available())
   {
      String line = f.readStringUntil('\n');
      Serial.println(line);
      Disp(0,0, line,1);
      ESP.wdtFeed();
   }
  }
  f.close();
  return;
}
void Upload_to_GoogleSheets(){
  File myfile;
  Serial.println("........Uploading to sheet........");
  ESP.wdtFeed();
  myFile = SD.open("attended.txt",FILE_READ);
  if(myFile)
  {
   while(myFile.available())
   {
      String line_in_attendance = myFile.readStringUntil('\n');
      Data_to_Sheets(1, atof(line_in_attendance.c_str()));
      ESP.wdtFeed();
   }
  }
  myFile.close();
  Serial.println("Uploading is done :)");
  Disp(0,40,"Uploading is done ;)",1);
  for(int i=0;i<1000;i++)
  {
    attend[i] = 0;
    ESP.wdtFeed();
  }
  if(SD.exists("attended.txt"))
  {
    SD.remove("attended.txt");
  }
  Serial.println("Now you are ready for the next class ;)");
  Disp(0,20,"Now you are ready \nfor the next class ;)",0);
  delay(1000);
  return;
}
int readFing(){
  int result=getFingerprintID();
  Serial.println(result);
  if(result == 1)
  {
    Serial.println("Hello! Host");
    Disp(0,20,"Hello Host!",0);
    delay(1000);
    return result;
  }
  else if(result != 0)
  {
    attend[result] ++;
    if(attend[result]==1)
    {
      myFile = SD.open("attended.txt", FILE_WRITE);
      if (myFile) 
      {
        Serial.println("Marking to attended");
        myFile.println(String(rollNumber[result]));
        myFile.close();
        Serial.println("done.");
      } 
      else 
      {
        Serial.println("error opening attended.txt");
      }
      Serial.print("ID of the student:");
      Disp(0,20,"ID of the student:",0);
      Disp(0,30,String(rollNumber[result]),1);
      Disp(0,40,"Marked",1);
      Serial.println("MARKED :)");
      delay(1000);
      Disp(0,20,"Next student..,",0);
      delay(1000);
    }
    else
    {
      Serial.println("Already Marked ");
      Disp(0,20,"Already Marked :>",0);
      delay(1000);
      Disp(0,20,"Another Student.....,",0);
      delay(1000);
    }
  }
  return result;
}
void rest(){
  Disp(0,10,"Clearing Fingerprints",0);
  finger.emptyDatabase();
  if (SD.exists("attended.txt")) {
    Serial.println("Removing attended.txt...");
    Disp(0,20,"Removing \nattended.txt...",1);
    SD.remove("attended.txt");
  } 
  else {
    Serial.println("attended.txt doesn't exist.");
    Disp(0,0,"attended.txt doesn't \nexist.",0);
  }
  if (SD.exists("ROLLnum.txt")) {
    Serial.println("Removing ROLLnum.txt...");
    Disp(0,30,"Removing ROLLnum.txt...",1);
    SD.remove("ROLLnum.txt");
  } 
  else{
    Serial.println("ROLLnum.txt doesn't exist.");
    Disp(0,0,"ROLLnum.txt doesn't \nexist.",0);
  }
  Serial.println("Resetting all the code :(");
  Disp(0,40,"Resetting all \nthe code :(",1);
  delay(1000);
  ESP.restart(); 
  return;
}
void delfing(){
  Serial.println("Enter the Roll Number:");
  Disp(0,10,"Enter the Roll Number:",0);
  unsigned long int checker;
  checker = atol(String_keypad().c_str());
  int i=0,reads;
  for(i=2;i<sizeof(rollNumber);i++)
  {
    if(rollNumber[i] == checker)
    {
      reads = i;
      break;
    }
  }
  Serial.println("Deleting Fingerprint.........");
  Disp(0,10,"Deleting Fingerprint.......",0);
  deleteFingerprint(reads);
  Serial.println("Fingerprint deleted");
  display.drawBitmap(70, 0, fingerprint_deleted , 128, 64, BLACK, WHITE);
  display.display();
  delay(200);
}
uint8_t deleteFingerprint(uint8_t id){
  uint8_t p = -1;
  p = finger.deleteModel(id);
  if (p == FINGERPRINT_OK) {
    Serial.println("Deleted!");
    Disp(0,20,"Fingerprint \ndeleted",1);
    display.drawBitmap(70, 20, fingerprint_deleted , 128, 64, BLACK, WHITE);
    display.display();
    delay(1000);
  } else if (p == FINGERPRINT_PACKETRECIEVEERR) {
    Serial.println("Communication error");
  } else if (p == FINGERPRINT_BADLOCATION) {
    Serial.println("Could not delete in that location");
  } else if (p == FINGERPRINT_FLASHERR) {
    Serial.println("Error writing to flash");
  } else {
    Serial.print("Unknown error: 0x"); 
    Serial.println(p, HEX);
    Disp(0,0,"Didn't Find Roll No." ,0);//////////////////////////////////////////////////////////////////////////////////check
    delay(500);
  }
  return p;
}
char keypad(){
  char show = 'Y';
  char temp;
  for(int i=0;i<4;i++)
  {
    int R = r[i];
    mcp.writeGPIOA(R);
    uint8_t stat = mcp.readGPIOA();
    if(stat == R+8 )
    {
      show = hexaKeys[i][0];
      // Serial.println(hexaKeys[i][0]);
    }else if(stat == R+4)
    {
      show = hexaKeys[i][1];
      // Serial.println(hexaKeys[i][1]);
    }else if(stat == R+2)
    {
      show = hexaKeys[i][2];
      // Serial.println(hexaKeys[i][2]);
    }else if(stat == R+1)
    {
      show = hexaKeys[i][3];
      // Serial.println(hexaKeys[i][3]);
    }
    while(stat != R)
    {
      ESP.wdtFeed();
      stat = mcp.readGPIOA();
    }
    // delay(100);
  }
  return show;
}
String String_keypad(){
  String outString;
  char temp;
  outString = "";
  temp = 'Y';
  while(temp != '*')
  {
    temp = keypad();
    if(temp != 'Y' && temp !='*' && temp != 'D'){
      outString += String(temp);
      Disp(0,30, outString,1);
    }
    else if(temp == 'D')
    {
      outString =  outString.substring(0,strlen(outString.c_str())-1);
      Serial.println(outString);
      display.setTextSize(1);
      display.setCursor(0,30);
      display.setTextColor(0xFFFF, 0);
      display.print("                    ");
      display.setTextSize(1); 
      Disp(0,30, outString,1);
    }
    ESP.wdtFeed();
  }
  return outString;
}
String String_keypad1(){
  String outString;
  char temp;
  outString = "";
  temp = 'Y';
  while(temp != '*')
  {
    temp = keypad();
    if(temp != 'Y' && temp !='*' && temp != 'D'){
      outString += String(temp);
      Disp(0,50, outString,1);
    }
    else if(temp == 'D')
    {
      outString =  outString.substring(0,strlen(outString.c_str())-1);
      Serial.println(outString);
      display.setTextSize(1);
      display.setCursor(0,50);
      display.setTextColor(0xFFFF, 0);
      display.print("                    ");
      display.setTextSize(1); 
      Disp(0,50, outString,1);
    }
    ESP.wdtFeed();
  }
  return outString;
}
uint8_t getFingerprintID(){
  uint8_t p = finger.getImage();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image taken");
      Disp(0,10,"Image \ntaken", 0);
        display.drawBitmap( 60, 0, image_taken, 64, 64, WHITE);
        display.display();
        delay(1000);
      break;
    default:
      Serial.println("Unknown error");
      Disp(0,10, "place thumb to \nmark attendance",0); 
      delay(1000);                                                    ///////////////////////////////////////////////////////////////////////////////////
      return 0;
  }
  ESP.wdtFeed();
  p = finger.image2Tz();
  switch (p) {
    case FINGERPRINT_OK:
      Serial.println("Image converted");
      break;
    default:
      Serial.println("Unknown error");
      return 0;
  }
  p = finger.fingerSearch();
  if (p == FINGERPRINT_OK) {
    Serial.println("Found a print match!");
    Disp(0,10, "Found a Match!",0);
    display.drawBitmap( 60, 20, FinPr_valid_bits, 64, 64, WHITE);
    display.display();
    delay(300);
  } else {
    Serial.println("Unknown error");
    return 0;
  }
  Serial.print("Found ID #"); 
  Serial.print(finger.fingerID);
  delay(300);
  Serial.print(" with confidence of ");
  Serial.println(finger.confidence);
  ESP.wdtFeed();
  return finger.fingerID;
}
void Disp(int x,int y,String inp,int ref){
  if(ref == 0)
  {
    display.clearDisplay();
  }
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(x,y);
  display.print(inp);
  display.display();
}

// unsigned long count_in_file(String file)
// {
//   File f;
//   unsigned long count = 0;
//   f= SD.open(file,FILE_READ);
//   if(f)
//   {
//    while(f.available())
//    {
//       count +=1;
//       ESP.wdtFeed();
//    }
//   }
//   f.close();
//   return count;
// }
// uint8_t readNumber(void){
//   uint8_t num = 0;
//   while (num == 0) {
//     while (! Serial.available());
//     num = Serial.parseInt();
//     ESP.wdtFeed();
//   }
//   return num;
// }
// unsigned long int readRollNum(void) {
//   unsigned long int temp = 0;
//   while (temp == 0) {
//     while (! Serial.available());
//     temp = Serial.parseInt();
//     ESP.wdtFeed();
//   }
//   return temp;
// }